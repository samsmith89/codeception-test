# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2
jobs:
  build:
    docker:
      # Specify the version you desire here
      - image: circleci/php:7.3-apache-node-browsers
        auth:
          username: gsamsmith
          password: 7FsHD@Wek92x  # context / project UI env-var reference
      - image: circleci/mysql:8.0.4
        auth:
          username: gsamsmith
          password: 7FsHD@Wek92x  # context / project UI env-var reference
        environment:
          MYSQL_ROOT_PASSWORD: rootpw
          MYSQL_DATABASE: test_db
          MYSQL_USER: user
          MYSQL_PASSWORD: passw0rd

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # Using the RAM variation mitigates I/O contention
      # for database intensive operations.
#      - image: circleci/mysql:5.7-ram
      #
      # - image: redis:2.8.19

    steps:
      - run:
          # Our primary container isn't MYSQL so run a sleep command until it's ready.
          name: Waiting for MySQL to be ready
          command: |
            for i in `seq 1 30`;
            do
              nc -z 127.0.0.1 3306 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for MySQL && exit 1
      - run:
          name: Install MySQL CLI; Import dummy data; run an example query
          command: |
            sudo apt-get install default-mysql-client
#            mysql -h 127.0.0.1 -u user -ppassw0rd test_db < sql-data/dummy.sql
#            mysql -h 127.0.0.1 -u user -ppassw0rd --execute="SELECT * FROM test_db.Persons"
      # No password is required for the MySQL user `ubuntu`
      - run: mysql -u ubuntu -e "create database wordpress"

      # Use cURL to fetch WP-CLI
      - run: curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar

      # Make sure WP-CLI is executable
      - run: chmod +x wp-cli.phar

      # Download WordPress into `wordpress` directory
      - run: ./wp-cli.phar core download --allow-root --path=wordpress

      # Generate `wp-config.php` file
      - run: ./wp-cli.phar core config --allow-root --dbname=wordpress --dbuser=ubuntu --dbhost=localhost --path=wordpress

      # Install WordPress
      - run: ./wp-cli.phar core install --allow-root --admin_name=admin --admin_password=admin --admin_email=admin@example.com --url=http://wppusher-plugin.dev:8080 --title=WordPress --path=wordpress

      # Clonse WP Pusher plugin from GitHub
      - run: ./wp-cli.phar plugin install classic-editor --activate

      # And use WP-CLI to activate it
#      - ./wp-cli.phar plugin activate classic-editor --path=wordpress
#      - checkout
#
#      - run: sudo apt update # PHP CircleCI 2.0 Configuration File# PHP CircleCI 2.0 Configuration File sudo apt install zlib1g-dev libsqlite3-dev
#      - run: sudo docker-php-ext-install zip
#
#      # Download and cache dependencies
#      - restore_cache:
#          keys:
#            # "composer.lock" can be used if it is committed to the repo
#            - v1-dependencies-{{ checksum "composer.json" }}
#            # fallback to using the latest cache if no exact match is found
#            - v1-dependencies-
#
#      - run: composer install -n --prefer-dist
#
#      - save_cache:
#          key: v1-dependencies-{{ checksum "composer.json" }}
#          paths:
#            - ./vendor
#      - restore_cache:
#          keys:
#            - node-v1-{{ checksum "package.json" }}
#            - node-v1-
#      - run: yarn install
#      - save_cache:
#          key: node-v1-{{ checksum "package.json" }}
#          paths:
#            - node_modules
#
#      # prepare the database
##      - run: touch storage/testing.sqlite
##      - run: php artisan migrate --env=testing --database=sqlite_testing --force
#
#      # run tests with phpunit or codecept
#      #- run: ./vendor/bin/phpunit
#      - run: ./vendor/bin/codecept build
#      - run: ./vendor/bin/codecept run acceptance
